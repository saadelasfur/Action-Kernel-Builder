name: Build (One UI)

on:
  workflow_dispatch:
    branches:
      - 'main'

jobs:
  build:
    runs-on: ubuntu-24.04

    strategy:
      fail-fast: false
      matrix:
        variant: [OneUI, OneUI-erofs]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set variables
        run: |
          DATE=`date +%Y%m%d`
          WORK_DIR=`git rev-parse --show-toplevel`
          OUT_DIR="$WORK_DIR/builds"
          KSU_VER="v1.0.3"
          BUILD_VARIANT="${{ matrix.variant }}"
          RELEASE_VERSION="KSU_$KSU_VER-$DATE"

          echo "DATE=$DATE" >> $GITHUB_ENV
          echo "WORK_DIR=$WORK_DIR" >> $GITHUB_ENV
          echo "OUT_DIR=$OUT_DIR" >> $GITHUB_ENV
          echo "KSU_VER=$KSU_VER" >> $GITHUB_ENV
          echo "BUILD_VARIANT=$BUILD_VARIANT" >> $GITHUB_ENV
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV

          VARS="DATE WORK_DIR OUT_DIR KSU_VER BUILD_VARIANT RELEASE_VERSION"
          for var in $VARS; do
              unset $var
          done

      - name: Display variables
        run: |
          echo "DATE: ${{ env.DATE }}"
          echo "WORK_DIR: ${{ env.WORK_DIR }}"
          echo "OUT_DIR: ${{ env.OUT_DIR }}"
          echo "KSU_VER: ${{ env.KSU_VER }}"
          echo "BUILD_VARIANT: ${{ env.BUILD_VARIANT }}"
          echo "RELEASE_VERSION: ${{ env.RELEASE_VERSION }}"

      - name: Set up build environment
        run: |
          sudo apt update && sudo apt upgrade -y
          DEBIAN_FRONTEND=noninteractive sudo apt install -yq \
              attr ccache cpio clang golang linux-modules-extra-$(uname -r) \
              libbrotli-dev libgtest-dev libprotobuf-dev libunwind-dev libusb-1.0-0-dev libzstd-dev \
              build-essential lld cmake llvm ninja-build protobuf-compiler f2fs-tools zipalign \
              gcc-aarch64-linux-gnu libc6-dev libfmt-dev libarchive-tools bc flex bison p7zip-full \
              libncurses5-dev lzop python3 zip unzip bsdiff python3-pip
          sudo modprobe f2fs

          sudo cp --preserve=all "${{ env.WORK_DIR }}/tools/magiskboot" "/usr/bin/magiskboot" && sudo chmod +x /usr/bin/magiskboot
          sudo cp --preserve=all "${{ env.WORK_DIR }}/tools/avbtool" "/usr/bin/avbtool" && sudo chmod +x /usr/bin/avbtool

          for i in eur swa cis; do
              7z x "${{ env.WORK_DIR }}/m52xq/images/$i/Images.zip" -o"${{ env.WORK_DIR }}/m52xq/images/$i/"
          done

#      - name: Build toolchain
#        run: |
#          cd "${{ env.WORK_DIR }}"
#          [[ -d "llvm-project" ]] && rm -rf llvm-project
#          [[ -d "clang-toolchain" ]] && rm -rf clang-toolchain
#          mkdir clang-toolchain
#          git clone --branch llvm-r383902b https://android.googlesource.com/toolchain/llvm-project ./llvm-project
#          cd llvm-project
#          mkdir build
#          cmake -S llvm -B build -G Ninja \
#              -DLLVM_ENABLE_PROJECTS="clang;lld" \
#              -DCMAKE_BUILD_TYPE=Release \
#              -DLLVM_ENABLE_ASSERTIONS=OFF \
#              -DLLVM_USE_LINKER=lld
#          ninja -C build -j$(nproc --all)
#          ninja -C build check-all -j$(nproc --all)
#          mv "${{ env.WORK_DIR }}/llvm-project/build/*" "${{ env.WORK_DIR }}/clang-toolchain/"
#          rm -rf llvm-project

      - name: Set up prebuilt toolchain
        run: |
          cd "${{ env.WORK_DIR }}"
          [[ -d "clang-toolchain" ]] && rm -rf clang-toolchain
          [[ -d "tmp" ]] && rm -rf tmp
          mkdir tmp
          cd tmp
          git init && git remote add origin https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86
          git fetch --depth=1 origin refs/heads/llvm-r383902b
          git checkout FETCH_HEAD -- clang-r383902
          mv clang-r383902 "${{ env.WORK_DIR }}/clang-toolchain"
          cd ..
          rm -rf tmp

      - name: Clone kernel source
        run: |
          cd "${{ env.WORK_DIR }}"
          [[ -d "android_kernel_samsung_sm7325" ]] && rm -rf android_kernel_samsung_sm7325
          git clone --recurse-submodules https://github.com/saadelasfur/android_kernel_samsung_sm7325.git -b ksu ./android_kernel_samsung_sm7325

      - name: Build kernel
        env:
          BUILD_VARIANT: ${{ env.BUILD_VARIANT }}
        run: |
          cd "${{ env.WORK_DIR }}"
          export TERM=xterm
          chmod +x build.sh

          if [[ "$BUILD_VARIANT" == "OneUI-erofs" ]]; then
            source ./build.sh --clean --erofs
          elif [[ "$BUILD_VARIANT" == "OneUI" ]]; then
            source ./build.sh --clean
          fi

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.RELEASE_VERSION }}_${{ env.BUILD_VARIANT }}
          path: ${{ env.OUT_DIR }}/${{ env.RELEASE_VERSION }}_m52xq_${{ env.BUILD_VARIANT }}.zip
          compression-level: 0
